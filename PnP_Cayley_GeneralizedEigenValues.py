import numpy as np
import numpy.linalg as la
import scipy
import csv
from scipy.linalg import eig
import operator as op
from functools import reduce
import time
from numpy.linalg import inv


def ncr(n, r):
    r = min(r, n-r)
    numer = reduce(op.mul, range(n, n-r, -1), 1)
    denom = reduce(op.mul, range(1, r+1), 1)
    return numer // denom
### Constant Parameters ###
n = 3  # n-variate polynomials
DD = 7  # macaulay degree
d = 3 # polysistem degree
crk = 27  # corank of macaulay matrix at degree d


# Calculate Macualay matrix dimensions & number of monomials
pd, qd = n , ncr(n + d, d)
pD, qD = n * ncr(n + DD - d, DD - d), ncr(n + DD, DD)  # dimensions of Macualay matrix
qp = ncr(n + DD - 1, DD - 1)  # number of monomials up to order d-1
qD_d = ncr(n + DD - d, DD - d)





def pnp(points, lines):


  ###   D9  This part is O(N)  ###
  (D, zz, A2, p ,z, N)=build_M_T(points,lines)

  ###   This part does not depend on N  ###
  (ps, m) = polysistem(D)          ###   Get polysistem & Macaulay matrix   ###
  u, s, vh = scipy.linalg.svd(m)   ###   SVD   ###
  (A, A0, B) = shift_matrix(vh)    ### shift matrix ###
  l, V = scipy.linalg.eig(B.dot(A.T), A0.dot(A.T))  ### Genaralized Eigenvalue Problem ###

  ###   extract solution (currently depends in N)  ###
  (rot, trans)=sol(D, A , V, zz, A2, p, N)
  return (rot,trans)


def C(point):
    x, y, z = point
    return np.array([[x, y, z, 0, 0, 0, 0, 0, 0],
                     [0, 0, 0, x, y, z, 0, 0, 0],
                     [0, 0, 0, 0, 0, 0, x, y, z]])

def build_M_T(real_points, lines):
    n = len(lines)
    z = lines.T
    p = points.T
    zz = [np.outer(l, l) for l in lines]
    A2 = n * np.eye(3) - np.sum(zz, axis=0)
    Q = []
    padded_points = []
    Q_sum = np.zeros([3, 3])
    temp_sum = np.zeros([3, 9])
    for i in range(n):
        line = lines[i]
        point = real_points[i]
        padded_points.append(C(point))
        v = np.outer(line, line) / np.inner(line, line)
        q = (v - np.eye(3)).T.dot(v - np.eye(3))
        Q.append(q)
        Q_sum = Q_sum + q
        temp_sum = temp_sum + q.dot(padded_points[i])
    inverse = inv(Q_sum / n) / n
    T = -inverse.dot(temp_sum)
    M = np.zeros([9, 9])
    for i in range(n):
        current = padded_points[i] + T
        M = M + current.T.dot(Q[i]).dot(current)
    # M = symmetrize(M)
    return (M, zz, A2, p, z, n)

def polysistem(D):
    a0=2 * D[0, 5] - 2 * D[0, 7] + 2 * D[4, 5] - 2 * D[4, 7] + 2 * D[5, 0] + 2 * D[5, 4] + 2 * D[5, 8] - 2 * D[7, 0] - 2 * D[7, 4] - 2 * D[7, 8] + 2 * D[8, 5] - 2 * D[8, 7]  # constant term
    a1=4 * D[0, 0] - 4 * D[4, 4] - 4 * D[4, 8] + 8 * D[5, 5] - 8 * D[5, 7] - 8 * D[7, 5] + 8 * D[7, 7] - 4 * D[8, 4] - 4 * D[8, 8]  # s1
    a2=2 * D[0, 1] + 2 * D[0, 3] + 2 * D[1, 0] + 2 * D[1, 4] + 2 * D[1, 8] - 4 * D[2, 5] + 4 * D[2, 7] + 2 * D[3, 0] + 2 * D[3, 4] + 2 * D[3, 8] + 2 * D[4, 1] + 2 * D[4, 3] - 4 * D[5, 2] + 4 * D[5, 6] + 4 * D[6, 5] - 4 * D[6, 7] + 4 * D[7, 2] - 4 * D[7, 6] + 2 * D[8, 1] + 2 * D[8, 3]  # s2
    a3=2 * D[0, 2] + 2 * D[0, 6] + 4 * D[1, 5] - 4 * D[1, 7] + 2 * D[2, 0] + 2 * D[2, 4] + 2 * D[2, 8] - 4 * D[3, 5] + 4 * D[3, 7] + 2 * D[4, 2] + 2 * D[4, 6] + 4 * D[5, 1] - 4 * D[5, 3] + 2 * D[6, 0] + 2 * D[6, 4] + 2 * D[6, 8] - 4 * D[7, 1] + 4 * D[7, 3] + 2 * D[8, 2] + 2 * D[8, 6]  # s3
    a4=6 * D[0, 5] - 6 * D[0, 7] - 6 * D[4, 5] + 6 * D[4, 7] + 6 * D[5, 0] - 6 * D[5, 4] - 6 * D[5, 8] - 6 * D[7, 0] + 6 * D[7, 4] + 6 * D[7, 8] - 6 * D[8, 5] + 6 * D[8, 7]  # s1^2
    a5=4 * D[0, 6] - 4 * D[0, 2] + 8 * D[1, 5] - 8 * D[1, 7] - 4 * D[2, 0] + 4 * D[2, 4] + 4 * D[2, 8] + 8 * D[3, 5] - 8 * D[3, 7] + 4 * D[4, 2] - 4 * D[4, 6] + 8 * D[5, 1] + 8 * D[5, 3] + 4 * D[6, 0] - 4 * D[6, 4] - 4 * D[6, 8] - 8 * D[7, 1] - 8 * D[7, 3] + 4 * D[8, 2] - 4 * D[8, 6]  # s1 * s2
    a6=4 * D[0, 1] - 4 * D[0, 3] + 4 * D[1, 0] - 4 * D[1, 4] - 4 * D[1, 8] + 8 * D[2, 5] - 8 * D[2, 7] - 4 * D[3, 0] + 4 * D[3, 4] + 4 * D[3, 8] - 4 * D[4, 1] + 4 * D[4, 3] + 8 * D[5, 2] + 8 * D[5, 6] + 8 * D[6, 5] - 8 * D[6, 7] - 8 * D[7, 2] - 8 * D[7, 6] - 4 * D[8, 1] + 4 * D[8, 3]  # s1 * s3
    a7=2 * D[0, 7] - 2 * D[0, 5] - 4 * D[1, 2] + 4 * D[1, 6] - 4 * D[2, 1] - 4 * D[2, 3] - 4 * D[3, 2] + 4 * D[3, 6] + 2 * D[4, 5] - 2 * D[4, 7] - 2 * D[5, 0] + 2 * D[5, 4] - 2 * D[5, 8] + 4 * D[6, 1] + 4 * D[6, 3] + 2 * D[7, 0] - 2 * D[7, 4] + 2 * D[7, 8] - 2 * D[8, 5] + 2 * D[8, 7]  # s2^2
    a8=8 * D[1, 1] - 8 * D[2, 2] - 8 * D[3, 3] + 8 * D[5, 5] + 8 * D[6, 6] - 8 * D[7, 7]  # s2 * s3
    a9=2 * D[0, 7] - 2 * D[0, 5] + 4 * D[1, 2] + 4 * D[1, 6] + 4 * D[2, 1] - 4 * D[2, 3] - 4 * D[3, 2] - 4 * D[3, 6] - 2 * D[4, 5] + 2 * D[4, 7] - 2 * D[5, 0] - 2 * D[5, 4] + 2 * D[5, 8] + 4 * D[6, 1] - 4 * D[6, 3] + 2 * D[7, 0] + 2 * D[7, 4] - 2 * D[7, 8] + 2 * D[8, 5] - 2 * D[8, 7]  # s3^2
    a10=4 * D[0, 0] - 4 * D[0, 4] - 4 * D[0, 8] - 4 * D[4, 0] + 4 * D[4, 4] + 4 * D[4, 8] - 4 * D[8, 0] + 4 * D[8, 4] + 4 * D[8, 8] # s1^3
    a11=6 * D[0, 1] + 6 * D[0, 3] + 6 * D[1, 0] - 6 * D[1, 4] - 6 * D[1, 8] + 6 * D[3, 0] - 6 * D[3, 4] - 6 * D[3, 8] - 6 * D[4, 1] - 6 * D[4, 3] - 6 * D[8, 1] - 6 * D[8, 3]  # s1^2  * s2
    a12=6 * D[0, 2] + 6 * D[0, 6] + 6 * D[2, 0] - 6 * D[2, 4] - 6 * D[2, 8] - 6 * D[4, 2] - 6 * D[4, 6] + 6 * D[6, 0] - 6 * D[6, 4] - 6 * D[6, 8] - 6 * D[8, 2] - 6 * D[8, 6]  # s1^2 * s3
    a13=4 * D[0, 4] - 4 * D[0, 0] + 8 * D[1, 1] + 8 * D[1, 3] + 8 * D[3, 1] + 8 * D[3, 3] + 4 * D[4, 0] - 4 * D[4, 4] + 4 * D[8, 8]  # s1 * s2^2
    a14=4 * D[0, 5] + 4 * D[0, 7] + 8 * D[1, 2] + 8 * D[1, 6] + 8 * D[2, 1] + 8 * D[2, 3] + 8 * D[3, 2] + 8 * D[3, 6] - 4 * D[4, 5] - 4 * D[4, 7] + 4 * D[5, 0] - 4 * D[5, 4] - 4 * D[5, 8] + 8 * D[6, 1] + 8 * D[6, 3] + 4 * D[7, 0] - 4 * D[7, 4] - 4 * D[7, 8] - 4 * D[8, 5] - 4 * D[8, 7]  # s1 * s2 * s3
    a15=4 * D[0, 8] - 4 * D[0, 0] + 8 * D[2, 2] + 8 * D[2, 6] + 4 * D[4, 4] + 8 * D[6, 2] + 8 * D[6, 6] + 4 * D[8, 0] - 4 * D[8, 8]  # s1 * s3^2
    a16 = 2 * D[1, 4] - 2 * D[0, 3] - 2 * D[1, 0] - 2 * D[0, 1] - 2 * D[1, 8] - 2 * D[3, 0] + 2 * D[3, 4] - 2 * D[3, 8] + 2 * D[4, 1] + 2 * D[4, 3] - 2 * D[8, 1] - 2 * D[8, 3]  # s2^3
    a17 = 4 * D[1, 5] - 2 * D[0, 6] - 2 * D[0, 2] + 4 * D[1, 7] - 2 * D[2, 0] + 2 * D[2, 4] - 2 * D[2, 8] + 4 * D[3, 5] + 4 * D[3, 7] + 2 * D[4, 2] + 2 * D[4, 6] + 4 * D[5, 1] + 4 * D[5, 3] - 2 * D[6, 0] + 2 * D[6, 4] - 2 * D[6, 8] + 4 * D[7, 1] + 4 * D[7, 3] - 2 * D[8, 2] - 2 * D[8, 6]  # s2^2 * s3
    a18=2 * D[1, 8] - 2 * D[0, 3] - 2 * D[1, 0] - 2 * D[1, 4] - 2 * D[0, 1] + 4 * D[2, 5] + 4 * D[2, 7] - 2 * D[3, 0] - 2 * D[3, 4] + 2 * D[3, 8] - 2 * D[4, 1] - 2 * D[4, 3] + 4 * D[5, 2] + 4 * D[5, 6] + 4 * D[6, 5] + 4 * D[6, 7] + 4 * D[7, 2] + 4 * D[7, 6] + 2 * D[8, 1] + 2 * D[8, 3]  # s2 * s3^2
    a19=2 * D[2, 8] - 2 * D[0, 6] - 2 * D[2, 0] - 2 * D[2, 4] - 2 * D[0, 2] - 2 * D[4, 2] - 2 * D[4, 6] - 2 * D[6, 0] - 2 * D[6, 4] + 2 * D[6, 8] + 2 * D[8, 2] + 2 * D[8, 6]  # s3^3


    b0=- 2 * D[0, 2] + 2 * D[0, 6] - 2 * D[2, 0] - 2 * D[2, 4] - 2 * D[2, 8] - 2 * D[4, 2] + 2 * D[4, 6] + 2 * D[6, 0] + 2 * D[6, 4] + 2 * D[6, 8] - 2 * D[8, 2] + 2 * D[8, 6]  # constant term
    b1=2 * D[0, 1] + 2 * D[0, 3] + 2 * D[1, 0] + 2 * D[1, 4] + 2 * D[1, 8] - 4 * D[2, 5] + 4 * D[2, 7] + 2 * D[3, 0] + 2 * D[3, 4] + 2 * D[3, 8] + 2 * D[4, 1] + 2 * D[4, 3] - 4 * D[5, 2] + 4 * D[5, 6] + 4 * D[6, 5] - 4 * D[6, 7] + 4 * D[7, 2] - 4 * D[7, 6] + 2 * D[8, 1] + 2 * D[8, 3]  # s1
    b2=8 * D[2, 2] - 4 * D[0, 8] - 4 * D[0, 0] - 8 * D[2, 6] + 4 * D[4, 4] - 8 * D[6, 2] + 8 * D[6, 6] - 4 * D[8, 0] - 4 * D[8, 8]  # s2
    b3=2 * D[0, 5] + 2 * D[0, 7] - 4 * D[1, 2] + 4 * D[1, 6] - 4 * D[2, 1] + 4 * D[2, 3] + 4 * D[3, 2] - 4 * D[3, 6] + 2 * D[4, 5] + 2 * D[4, 7] + 2 * D[5, 0] + 2 * D[5, 4] + 2 * D[5, 8] + 4 * D[6, 1] - 4 * D[6, 3] + 2 * D[7, 0] + 2 * D[7, 4] + 2 * D[7, 8] + 2 * D[8, 5] + 2 * D[8, 7]  # s3
    b4=2 * D[0, 6] - 2 * D[0, 2] + 4 * D[1, 5] - 4 * D[1, 7] - 2 * D[2, 0] + 2 * D[2, 4] + 2 * D[2, 8] + 4 * D[3, 5] - 4 * D[3, 7] + 2 * D[4, 2] - 2 * D[4, 6] + 4 * D[5, 1] + 4 * D[5, 3] + 2 * D[6, 0] - 2 * D[6, 4] - 2 * D[6, 8] - 4 * D[7, 1] - 4 * D[7, 3] + 2 * D[8, 2] - 2 * D[8, 6]  # s1^2
    b5=4 * D[0, 7] - 4 * D[0, 5] - 8 * D[1, 2] + 8 * D[1, 6] - 8 * D[2, 1] - 8 * D[2, 3] - 8 * D[3, 2] + 8 * D[3, 6] + 4 * D[4, 5] - 4 * D[4, 7] - 4 * D[5, 0] + 4 * D[5, 4] - 4 * D[5, 8] + 8 * D[6, 1] + 8 * D[6, 3] + 4 * D[7, 0] - 4 * D[7, 4] + 4 * D[7, 8] - 4 * D[8, 5] + 4 * D[8, 7]  # s1 * s2
    b6=8 * D[1, 1] - 8 * D[2, 2] - 8 * D[3, 3] + 8 * D[5, 5] + 8 * D[6, 6] - 8 * D[7, 7]  # s1 * s3
    b7=6 * D[0, 2] - 6 * D[0, 6] + 6 * D[2, 0] - 6 * D[2, 4] + 6 * D[2, 8] - 6 * D[4, 2] + 6 * D[4, 6] - 6 * D[6, 0] + 6 * D[6, 4] - 6 * D[6, 8] + 6 * D[8, 2] - 6 * D[8, 6]  # s2^2
    b8=4 * D[0, 3] - 4 * D[0, 1] - 4 * D[1, 0] + 4 * D[1, 4] - 4 * D[1, 8] - 8 * D[2, 5] - 8 * D[2, 7] + 4 * D[3, 0] - 4 * D[3, 4] + 4 * D[3, 8] + 4 * D[4, 1] - 4 * D[4, 3] - 8 * D[5, 2] + 8 * D[5, 6] + 8 * D[6, 5] + 8 * D[6, 7] - 8 * D[7, 2] + 8 * D[7, 6] - 4 * D[8, 1] + 4 * D[8, 3]  # s2 * s3
    b9=2 * D[0, 2] - 2 * D[0, 6] + 4 * D[1, 5] + 4 * D[1, 7] + 2 * D[2, 0] + 2 * D[2, 4] - 2 * D[2, 8] - 4 * D[3, 5] - 4 * D[3, 7] + 2 * D[4, 2] - 2 * D[4, 6] + 4 * D[5, 1] - 4 * D[5, 3] - 2 * D[6, 0] - 2 * D[6, 4] + 2 * D[6, 8] + 4 * D[7, 1] - 4 * D[7, 3] - 2 * D[8, 2] + 2 * D[8, 6]  # s3^2
    b10=2 * D[0, 1] + 2 * D[0, 3] + 2 * D[1, 0] - 2 * D[1, 4] - 2 * D[1, 8] + 2 * D[3, 0] - 2 * D[3, 4] - 2 * D[3, 8] - 2 * D[4, 1] - 2 * D[4, 3] - 2 * D[8, 1] - 2 * D[8, 3]  # s1^3
    b11=4 * D[0, 4] - 4 * D[0, 0] + 8 * D[1, 1] + 8 * D[1, 3] + 8 * D[3, 1] + 8 * D[3, 3] + 4 * D[4, 0] - 4 * D[4, 4] + 4 * D[8, 8]  # s1^2  * s2
    b12=2 * D[0, 5] + 2 * D[0, 7] + 4 * D[1, 2] + 4 * D[1, 6] + 4 * D[2, 1] + 4 * D[2, 3] + 4 * D[3, 2] + 4 * D[3, 6] - 2 * D[4, 5] - 2 * D[4, 7] + 2 * D[5, 0] - 2 * D[5, 4] - 2 * D[5, 8] + 4 * D[6, 1] + 4 * D[6, 3] + 2 * D[7, 0] - 2 * D[7, 4] - 2 * D[7, 8] - 2 * D[8, 5] - 2 * D[8, 7]  # s1^2 * s3
    b13=6 * D[1, 4] - 6 * D[0, 3] - 6 * D[1, 0] - 6 * D[0, 1] - 6 * D[1, 8] - 6 * D[3, 0] + 6 * D[3, 4] - 6 * D[3, 8] + 6 * D[4, 1] + 6 * D[4, 3] - 6 * D[8, 1] - 6 * D[8, 3]  # s1 * s2^2
    b14=8 * D[1, 5] - 4 * D[0, 6] - 4 * D[0, 2] + 8 * D[1, 7] - 4 * D[2, 0] + 4 * D[2, 4] - 4 * D[2, 8] + 8 * D[3, 5] + 8 * D[3, 7] + 4 * D[4, 2] + 4 * D[4, 6] + 8 * D[5, 1] + 8 * D[5, 3] - 4 * D[6, 0] + 4 * D[6, 4] - 4 * D[6, 8] + 8 * D[7, 1] + 8 * D[7, 3] - 4 * D[8, 2] - 4 * D[8, 6]  # s1 * s2 * s3
    b15=2 * D[1, 8] - 2 * D[0, 3] - 2 * D[1, 0] - 2 * D[1, 4] - 2 * D[0, 1] + 4 * D[2, 5] + 4 * D[2, 7] - 2 * D[3, 0] - 2 * D[3, 4] + 2 * D[3, 8] - 2 * D[4, 1] - 2 * D[4, 3] + 4 * D[5, 2] + 4 * D[5, 6] + 4 * D[6, 5] + 4 * D[6, 7] + 4 * D[7, 2] + 4 * D[7, 6] + 2 * D[8, 1] + 2 * D[8, 3]  # s1 * s3^2
    b16=4 * D[0, 0] - 4 * D[0, 4] + 4 * D[0, 8] - 4 * D[4, 0] + 4 * D[4, 4] - 4 * D[4, 8] + 4 * D[8, 0] - 4 * D[8, 4] + 4 * D[8, 8]  # s2^3
    b17=6 * D[4, 5] - 6 * D[0, 7] - 6 * D[0, 5] + 6 * D[4, 7] - 6 * D[5, 0] + 6 * D[5, 4] - 6 * D[5, 8] - 6 * D[7, 0] + 6 * D[7, 4] - 6 * D[7, 8] - 6 * D[8, 5] - 6 * D[8, 7]  # s2^2 * s3
    b18=4 * D[0, 0] - 4 * D[4, 4] + 4 * D[4, 8] + 8 * D[5, 5] + 8 * D[5, 7] + 8 * D[7, 5] + 8 * D[7, 7] + 4 * D[8, 4] - 4 * D[8, 8]  # s2 * s3^2
    b19=2 * D[5, 8] - 2 * D[0, 7] - 2 * D[4, 5] - 2 * D[4, 7] - 2 * D[5, 0] - 2 * D[5, 4] - 2 * D[0, 5] - 2 * D[7, 0] - 2 * D[7, 4] + 2 * D[7, 8] + 2 * D[8, 5] + 2 * D[8, 7] # s3^3

    c0=2 * D[0, 1] - 2 * D[0, 3] + 2 * D[1, 0] + 2 * D[1, 4] + 2 * D[1, 8] - 2 * D[3, 0] - 2 * D[3, 4] - 2 * D[3, 8] + 2 * D[4, 1] - 2 * D[4, 3] + 2 * D[8, 1] - 2 * D[8, 3]  # constant term
    c1=2 * D[0, 2] + 2 * D[0, 6] + 4 * D[1, 5] - 4 * D[1, 7] + 2 * D[2, 0] + 2 * D[2, 4] + 2 * D[2, 8] - 4 * D[3, 5] + 4 * D[3, 7] + 2 * D[4, 2] + 2 * D[4, 6] + 4 * D[5, 1] - 4 * D[5, 3] + 2 * D[6, 0] + 2 * D[6, 4] + 2 * D[6, 8] - 4 * D[7, 1] + 4 * D[7, 3] + 2 * D[8, 2] + 2 * D[8, 6]  # s1
    c2=2 * D[0, 5] + 2 * D[0, 7] - 4 * D[1, 2] + 4 * D[1, 6] - 4 * D[2, 1] + 4 * D[2, 3] + 4 * D[3, 2] - 4 * D[3, 6] + 2 * D[4, 5] + 2 * D[4, 7] + 2 * D[5, 0] + 2 * D[5, 4] + 2 * D[5, 8] + 4 * D[6, 1] - 4 * D[6, 3] + 2 * D[7, 0] + 2 * D[7, 4] + 2 * D[7, 8] + 2 * D[8, 5] + 2 * D[8, 7]  # s2
    c3=8 * D[1, 1] - 4 * D[0, 4] - 4 * D[0, 0] - 8 * D[1, 3] - 8 * D[3, 1] + 8 * D[3, 3] - 4 * D[4, 0] - 4 * D[4, 4] + 4 * D[8, 8]  # s3
    c4=2 * D[0, 1] - 2 * D[0, 3] + 2 * D[1, 0] - 2 * D[1, 4] - 2 * D[1, 8] + 4 * D[2, 5] - 4 * D[2, 7] - 2 * D[3, 0] + 2 * D[3, 4] + 2 * D[3, 8] - 2 * D[4, 1] + 2 * D[4, 3] + 4 * D[5, 2] + 4 * D[5, 6] + 4 * D[6, 5] - 4 * D[6, 7] - 4 * D[7, 2] - 4 * D[7, 6] - 2 * D[8, 1] + 2 * D[8, 3]  # s1^2
    c5=8 * D[1, 1] - 8 * D[2, 2] - 8 * D[3, 3] + 8 * D[5, 5] + 8 * D[6, 6] - 8 * D[7, 7]  # s1 * s2
    c6=4 * D[0, 7] - 4 * D[0, 5] + 8 * D[1, 2] + 8 * D[1, 6] + 8 * D[2, 1] - 8 * D[2, 3] - 8 * D[3, 2] - 8 * D[3, 6] - 4 * D[4, 5] + 4 * D[4, 7] - 4 * D[5, 0] - 4 * D[5, 4] + 4 * D[5, 8] + 8 * D[6, 1] - 8 * D[6, 3] + 4 * D[7, 0] + 4 * D[7, 4] - 4 * D[7, 8] + 4 * D[8, 5] - 4 * D[8, 7]  # s1 * s3
    c7=2 * D[0, 3] - 2 * D[0, 1] - 2 * D[1, 0] + 2 * D[1, 4] - 2 * D[1, 8] - 4 * D[2, 5] - 4 * D[2, 7] + 2 * D[3, 0] - 2 * D[3, 4] + 2 * D[3, 8] + 2 * D[4, 1] - 2 * D[4, 3] - 4 * D[5, 2] + 4 * D[5, 6] + 4 * D[6, 5] + 4 * D[6, 7] - 4 * D[7, 2] + 4 * D[7, 6] - 2 * D[8, 1] + 2 * D[8, 3]  # s2^2
    c8=4 * D[0, 2] - 4 * D[0, 6] + 8 * D[1, 5] + 8 * D[1, 7] + 4 * D[2, 0] + 4 * D[2, 4] - 4 * D[2, 8] - 8 * D[3, 5] - 8 * D[3, 7] + 4 * D[4, 2] - 4 * D[4, 6] + 8 * D[5, 1] - 8 * D[5, 3] - 4 * D[6, 0] - 4 * D[6, 4] + 4 * D[6, 8] + 8 * D[7, 1] - 8 * D[7, 3] - 4 * D[8, 2] + 4 * D[8, 6]  # s2 * s3
    c9=6 * D[0, 3] - 6 * D[0, 1] - 6 * D[1, 0] - 6 * D[1, 4] + 6 * D[1, 8] + 6 * D[3, 0] + 6 * D[3, 4] - 6 * D[3, 8] - 6 * D[4, 1] + 6 * D[4, 3] + 6 * D[8, 1] - 6 * D[8, 3]  # s3^2
    c10=2 * D[0, 2] + 2 * D[0, 6] + 2 * D[2, 0] - 2 * D[2, 4] - 2 * D[2, 8] - 2 * D[4, 2] - 2 * D[4, 6] + 2 * D[6, 0] - 2 * D[6, 4] - 2 * D[6, 8] - 2 * D[8, 2] - 2 * D[8, 6]  # s1^3
    c11=2 * D[0, 5] + 2 * D[0, 7] + 4 * D[1, 2] + 4 * D[1, 6] + 4 * D[2, 1] + 4 * D[2, 3] + 4 * D[3, 2] + 4 * D[3, 6] - 2 * D[4, 5] - 2 * D[4, 7] + 2 * D[5, 0] - 2 * D[5, 4] - 2 * D[5, 8] + 4 * D[6, 1] + 4 * D[6, 3] + 2 * D[7, 0] - 2 * D[7, 4] - 2 * D[7, 8] - 2 * D[8, 5] - 2 * D[8, 7]  # s1^2  * s2
    c12=4 * D[0, 8] - 4 * D[0, 0] + 8 * D[2, 2] + 8 * D[2, 6] + 4 * D[4, 4] + 8 * D[6, 2] + 8 * D[6, 6] + 4 * D[8, 0] - 4 * D[8, 8] # s1^2 * s3
    c13=4 * D[1, 5] - 2 * D[0, 6] - 2 * D[0, 2] + 4 * D[1, 7] - 2 * D[2, 0] + 2 * D[2, 4] - 2 * D[2, 8] + 4 * D[3, 5] + 4 * D[3, 7] + 2 * D[4, 2] + 2 * D[4, 6] + 4 * D[5, 1] + 4 * D[5, 3] - 2 * D[6, 0] + 2 * D[6, 4] - 2 * D[6, 8] + 4 * D[7, 1] + 4 * D[7, 3] - 2 * D[8, 2] - 2 * D[8, 6]  # s1 * s2^2
    c14=4 * D[1, 8] - 4 * D[0, 3] - 4 * D[1, 0] - 4 * D[1, 4] - 4 * D[0, 1] + 8 * D[2, 5] + 8 * D[2, 7] - 4 * D[3, 0] - 4 * D[3, 4] + 4 * D[3, 8] - 4 * D[4, 1] - 4 * D[4, 3] + 8 * D[5, 2] + 8 * D[5, 6] + 8 * D[6, 5] + 8 * D[6, 7] + 8 * D[7, 2] + 8 * D[7, 6] + 4 * D[8, 1] + 4 * D[8, 3] # s1 * s2 * s3
    c15=6 * D[2, 8] - 6 * D[0, 6] - 6 * D[2, 0] - 6 * D[2, 4] - 6 * D[0, 2] - 6 * D[4, 2] - 6 * D[4, 6] - 6 * D[6, 0] - 6 * D[6, 4] + 6 * D[6, 8] + 6 * D[8, 2] + 6 * D[8, 6]  # s1 * s3^2
    c16=2 * D[4, 5] - 2 * D[0, 7] - 2 * D[0, 5] + 2 * D[4, 7] - 2 * D[5, 0] + 2 * D[5, 4] - 2 * D[5, 8] - 2 * D[7, 0] + 2 * D[7, 4] - 2 * D[7, 8] - 2 * D[8, 5] - 2 * D[8, 7]  # s2^3
    c17=4 * D[0, 0] - 4 * D[4, 4] + 4 * D[4, 8] + 8 * D[5, 5] + 8 * D[5, 7] + 8 * D[7, 5] + 8 * D[7, 7] + 4 * D[8, 4] - 4 * D[8, 8]  # s2^2 * s3
    c18=6 * D[5, 8] - 6 * D[0, 7] - 6 * D[4, 5] - 6 * D[4, 7] - 6 * D[5, 0] - 6 * D[5, 4] - 6 * D[0, 5] - 6 * D[7, 0] - 6 * D[7, 4] + 6 * D[7, 8] + 6 * D[8, 5] + 6 * D[8, 7]  # s2 * s3^2
    c19=4 * D[0, 0] + 4 * D[0, 4] - 4 * D[0, 8] + 4 * D[4, 0] + 4 * D[4, 4] - 4 * D[4, 8] - 4 * D[8, 0] - 4 * D[8, 4] + 4 * D[8, 8]  # s3^3

    aa = [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19]
    bb = [b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19]
    cc = [c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19]

    m = np.zeros((pD, qD))

    m[0, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]] = aa
    m[1, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]] = bb
    m[2, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]] = cc
    m[3, [1, 4, 5, 6, 10, 11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]] = aa
    m[4, [1, 4, 5, 6, 10, 11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]] = bb
    m[5, [1, 4, 5, 6, 10, 11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]] = cc
    m[6, [2, 5, 7, 8, 11, 13, 14, 16, 17, 18, 21, 23, 24, 26, 27, 28, 30, 31, 32, 33]] = aa
    m[7, [2, 5, 7, 8, 11, 13, 14, 16, 17, 18, 21, 23, 24, 26, 27, 28, 30, 31, 32, 33]] = bb
    m[8, [2, 5, 7, 8, 11, 13, 14, 16, 17, 18, 21, 23, 24, 26, 27, 28, 30, 31, 32, 33]] = cc
    m[9, [3, 6, 8, 9, 12, 14, 15, 17, 18, 19, 22, 24, 25, 27, 28, 29, 31, 32, 33, 34]] = aa
    m[10, [3, 6, 8, 9, 12, 14, 15, 17, 18, 19, 22, 24, 25, 27, 28, 29, 31, 32, 33, 34]] = bb
    m[11, [3, 6, 8, 9, 12, 14, 15, 17, 18, 19, 22, 24, 25, 27, 28, 29, 31, 32, 33, 34]] = cc
    m[12, [4, 10, 11, 12, 20, 21, 22, 23, 24, 25, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44]] = aa
    m[13, [4, 10, 11, 12, 20, 21, 22, 23, 24, 25, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44]] = bb
    m[14, [4, 10, 11, 12, 20, 21, 22, 23, 24, 25, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44]] = cc
    m[15, [5, 11, 13, 14, 21, 23, 24, 26, 27, 28, 36, 38, 39, 41, 42, 43, 45, 46, 47, 48]] = aa
    m[16, [5, 11, 13, 14, 21, 23, 24, 26, 27, 28, 36, 38, 39, 41, 42, 43, 45, 46, 47, 48]] = bb
    m[17, [5, 11, 13, 14, 21, 23, 24, 26, 27, 28, 36, 38, 39, 41, 42, 43, 45, 46, 47, 48]] = cc
    m[18, [6, 12, 14, 15, 22, 24, 25, 27, 28, 29, 37, 39, 40, 42, 43, 44, 46, 47, 48, 49]] = aa
    m[19, [6, 12, 14, 15, 22, 24, 25, 27, 28, 29, 37, 39, 40, 42, 43, 44, 46, 47, 48, 49]] = bb
    m[20, [6, 12, 14, 15, 22, 24, 25, 27, 28, 29, 37, 39, 40, 42, 43, 44, 46, 47, 48, 49]] = cc
    m[21, [7, 13, 16, 17, 23, 26, 27, 30, 31, 32, 38, 41, 42, 45, 46, 47, 50, 51, 52, 53]] = aa
    m[22, [7, 13, 16, 17, 23, 26, 27, 30, 31, 32, 38, 41, 42, 45, 46, 47, 50, 51, 52, 53]] = bb
    m[23, [7, 13, 16, 17, 23, 26, 27, 30, 31, 32, 38, 41, 42, 45, 46, 47, 50, 51, 52, 53]] = cc
    m[24, [8, 14, 17, 18, 24, 27, 28, 31, 32, 33, 39, 42, 43, 46, 47, 48, 51, 52, 53, 54]] = aa
    m[25, [8, 14, 17, 18, 24, 27, 28, 31, 32, 33, 39, 42, 43, 46, 47, 48, 51, 52, 53, 54]] = bb
    m[26, [8, 14, 17, 18, 24, 27, 28, 31, 32, 33, 39, 42, 43, 46, 47, 48, 51, 52, 53, 54]] = cc
    m[27, [9, 15, 18, 19, 25, 28, 29, 32, 33, 34, 40, 43, 44, 47, 48, 49, 52, 53, 54, 55]] = aa
    m[28, [9, 15, 18, 19, 25, 28, 29, 32, 33, 34, 40, 43, 44, 47, 48, 49, 52, 53, 54, 55]] = bb
    m[29, [9, 15, 18, 19, 25, 28, 29, 32, 33, 34, 40, 43, 44, 47, 48, 49, 52, 53, 54, 55]] = cc
    m[30, [10, 20, 21, 22, 35, 36, 37, 38, 39, 40, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65]] = aa
    m[31, [10, 20, 21, 22, 35, 36, 37, 38, 39, 40, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65]] = bb
    m[32, [10, 20, 21, 22, 35, 36, 37, 38, 39, 40, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65]] = cc
    m[33, [11, 21, 23, 24, 36, 38, 39, 41, 42, 43, 57, 59, 60, 62, 63, 64, 66, 67, 68, 69]] = aa
    m[34, [11, 21, 23, 24, 36, 38, 39, 41, 42, 43, 57, 59, 60, 62, 63, 64, 66, 67, 68, 69]] = bb
    m[35, [11, 21, 23, 24, 36, 38, 39, 41, 42, 43, 57, 59, 60, 62, 63, 64, 66, 67, 68, 69]] = cc
    m[36, [12, 22, 24, 25, 37, 39, 40, 42, 43, 44, 58, 60, 61, 63, 64, 65, 67, 68, 69, 70]] = aa
    m[37, [12, 22, 24, 25, 37, 39, 40, 42, 43, 44, 58, 60, 61, 63, 64, 65, 67, 68, 69, 70]] = bb
    m[38, [12, 22, 24, 25, 37, 39, 40, 42, 43, 44, 58, 60, 61, 63, 64, 65, 67, 68, 69, 70]] = cc
    m[39, [13, 23, 26, 27, 38, 41, 42, 45, 46, 47, 59, 62, 63, 66, 67, 68, 71, 72, 73, 74]] = aa
    m[40, [13, 23, 26, 27, 38, 41, 42, 45, 46, 47, 59, 62, 63, 66, 67, 68, 71, 72, 73, 74]] = bb
    m[41, [13, 23, 26, 27, 38, 41, 42, 45, 46, 47, 59, 62, 63, 66, 67, 68, 71, 72, 73, 74]] = cc
    m[42, [14, 24, 27, 28, 39, 42, 43, 46, 47, 48, 60, 63, 64, 67, 68, 69, 72, 73, 74, 75]] = aa
    m[43, [14, 24, 27, 28, 39, 42, 43, 46, 47, 48, 60, 63, 64, 67, 68, 69, 72, 73, 74, 75]] = bb
    m[44, [14, 24, 27, 28, 39, 42, 43, 46, 47, 48, 60, 63, 64, 67, 68, 69, 72, 73, 74, 75]] = cc
    m[45, [15, 25, 28, 29, 40, 43, 44, 47, 48, 49, 61, 64, 65, 68, 69, 70, 73, 74, 75, 76]] = aa
    m[46, [15, 25, 28, 29, 40, 43, 44, 47, 48, 49, 61, 64, 65, 68, 69, 70, 73, 74, 75, 76]] = bb
    m[47, [15, 25, 28, 29, 40, 43, 44, 47, 48, 49, 61, 64, 65, 68, 69, 70, 73, 74, 75, 76]] = cc
    m[48, [16, 26, 30, 31, 41, 45, 46, 50, 51, 52, 62, 66, 67, 71, 72, 73, 77, 78, 79, 80]] = aa
    m[49, [16, 26, 30, 31, 41, 45, 46, 50, 51, 52, 62, 66, 67, 71, 72, 73, 77, 78, 79, 80]] = bb
    m[50, [16, 26, 30, 31, 41, 45, 46, 50, 51, 52, 62, 66, 67, 71, 72, 73, 77, 78, 79, 80]] = cc
    m[51, [17, 27, 31, 32, 42, 46, 47, 51, 52, 53, 63, 67, 68, 72, 73, 74, 78, 79, 80, 81]] = aa
    m[52, [17, 27, 31, 32, 42, 46, 47, 51, 52, 53, 63, 67, 68, 72, 73, 74, 78, 79, 80, 81]] = bb
    m[53, [17, 27, 31, 32, 42, 46, 47, 51, 52, 53, 63, 67, 68, 72, 73, 74, 78, 79, 80, 81]] = cc
    m[54, [18, 28, 32, 33, 43, 47, 48, 52, 53, 54, 64, 68, 69, 73, 74, 75, 79, 80, 81, 82]] = aa
    m[55, [18, 28, 32, 33, 43, 47, 48, 52, 53, 54, 64, 68, 69, 73, 74, 75, 79, 80, 81, 82]] = bb
    m[56, [18, 28, 32, 33, 43, 47, 48, 52, 53, 54, 64, 68, 69, 73, 74, 75, 79, 80, 81, 82]] = cc
    m[57, [19, 29, 33, 34, 44, 48, 49, 53, 54, 55, 65, 69, 70, 74, 75, 76, 80, 81, 82, 83]] = aa
    m[58, [19, 29, 33, 34, 44, 48, 49, 53, 54, 55, 65, 69, 70, 74, 75, 76, 80, 81, 82, 83]] = bb
    m[59, [19, 29, 33, 34, 44, 48, 49, 53, 54, 55, 65, 69, 70, 74, 75, 76, 80, 81, 82, 83]] = cc
    m[60, [20, 35, 36, 37, 56, 57, 58, 59, 60, 61, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93]] = aa
    m[61, [20, 35, 36, 37, 56, 57, 58, 59, 60, 61, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93]] = bb
    m[62, [20, 35, 36, 37, 56, 57, 58, 59, 60, 61, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93]] = cc
    m[63, [21, 36, 38, 39, 57, 59, 60, 62, 63, 64, 85, 87, 88, 90, 91, 92, 94, 95, 96, 97]] = aa
    m[64, [21, 36, 38, 39, 57, 59, 60, 62, 63, 64, 85, 87, 88, 90, 91, 92, 94, 95, 96, 97]] = bb
    m[65, [21, 36, 38, 39, 57, 59, 60, 62, 63, 64, 85, 87, 88, 90, 91, 92, 94, 95, 96, 97]] = cc
    m[66, [22, 37, 39, 40, 58, 60, 61, 63, 64, 65, 86, 88, 89, 91, 92, 93, 95, 96, 97, 98]] = aa
    m[67, [22, 37, 39, 40, 58, 60, 61, 63, 64, 65, 86, 88, 89, 91, 92, 93, 95, 96, 97, 98]] = bb
    m[68, [22, 37, 39, 40, 58, 60, 61, 63, 64, 65, 86, 88, 89, 91, 92, 93, 95, 96, 97, 98]] = cc
    m[69, [23, 38, 41, 42, 59, 62, 63, 66, 67, 68, 87, 90, 91, 94, 95, 96, 99, 100, 101, 102]] = aa
    m[70, [23, 38, 41, 42, 59, 62, 63, 66, 67, 68, 87, 90, 91, 94, 95, 96, 99, 100, 101, 102]] = bb
    m[71, [23, 38, 41, 42, 59, 62, 63, 66, 67, 68, 87, 90, 91, 94, 95, 96, 99, 100, 101, 102]] = cc
    m[72, [24, 39, 42, 43, 60, 63, 64, 67, 68, 69, 88, 91, 92, 95, 96, 97, 100, 101, 102, 103]] = aa
    m[73, [24, 39, 42, 43, 60, 63, 64, 67, 68, 69, 88, 91, 92, 95, 96, 97, 100, 101, 102, 103]] = bb
    m[74, [24, 39, 42, 43, 60, 63, 64, 67, 68, 69, 88, 91, 92, 95, 96, 97, 100, 101, 102, 103]] = cc
    m[75, [25, 40, 43, 44, 61, 64, 65, 68, 69, 70, 89, 92, 93, 96, 97, 98, 101, 102, 103, 104]] = aa
    m[76, [25, 40, 43, 44, 61, 64, 65, 68, 69, 70, 89, 92, 93, 96, 97, 98, 101, 102, 103, 104]] = bb
    m[77, [25, 40, 43, 44, 61, 64, 65, 68, 69, 70, 89, 92, 93, 96, 97, 98, 101, 102, 103, 104]] = cc
    m[78, [26, 41, 45, 46, 62, 66, 67, 71, 72, 73, 90, 94, 95, 99, 100, 101, 105, 106, 107, 108]] = aa
    m[79, [26, 41, 45, 46, 62, 66, 67, 71, 72, 73, 90, 94, 95, 99, 100, 101, 105, 106, 107, 108]] = bb
    m[80, [26, 41, 45, 46, 62, 66, 67, 71, 72, 73, 90, 94, 95, 99, 100, 101, 105, 106, 107, 108]] = cc
    m[81, [27, 42, 46, 47, 63, 67, 68, 72, 73, 74, 91, 95, 96, 100, 101, 102, 106, 107, 108, 109]] = aa
    m[82, [27, 42, 46, 47, 63, 67, 68, 72, 73, 74, 91, 95, 96, 100, 101, 102, 106, 107, 108, 109]] = bb
    m[83, [27, 42, 46, 47, 63, 67, 68, 72, 73, 74, 91, 95, 96, 100, 101, 102, 106, 107, 108, 109]] = cc
    m[84, [28, 43, 47, 48, 64, 68, 69, 73, 74, 75, 92, 96, 97, 101, 102, 103, 107, 108, 109, 110]] = aa
    m[85, [28, 43, 47, 48, 64, 68, 69, 73, 74, 75, 92, 96, 97, 101, 102, 103, 107, 108, 109, 110]] = bb
    m[86, [28, 43, 47, 48, 64, 68, 69, 73, 74, 75, 92, 96, 97, 101, 102, 103, 107, 108, 109, 110]] = cc
    m[87, [29, 44, 48, 49, 65, 69, 70, 74, 75, 76, 93, 97, 98, 102, 103, 104, 108, 109, 110, 111]] = aa
    m[88, [29, 44, 48, 49, 65, 69, 70, 74, 75, 76, 93, 97, 98, 102, 103, 104, 108, 109, 110, 111]] = bb
    m[89, [29, 44, 48, 49, 65, 69, 70, 74, 75, 76, 93, 97, 98, 102, 103, 104, 108, 109, 110, 111]] = cc
    m[90, [30, 45, 50, 51, 66, 71, 72, 77, 78, 79, 94, 99, 100, 105, 106, 107, 112, 113, 114, 115]] = aa
    m[91, [30, 45, 50, 51, 66, 71, 72, 77, 78, 79, 94, 99, 100, 105, 106, 107, 112, 113, 114, 115]] = bb
    m[92, [30, 45, 50, 51, 66, 71, 72, 77, 78, 79, 94, 99, 100, 105, 106, 107, 112, 113, 114, 115]] = cc
    m[93, [31, 46, 51, 52, 67, 72, 73, 78, 79, 80, 95, 100, 101, 106, 107, 108, 113, 114, 115, 116]] = aa
    m[94, [31, 46, 51, 52, 67, 72, 73, 78, 79, 80, 95, 100, 101, 106, 107, 108, 113, 114, 115, 116]] = bb
    m[95, [31, 46, 51, 52, 67, 72, 73, 78, 79, 80, 95, 100, 101, 106, 107, 108, 113, 114, 115, 116]] = cc
    m[96, [32, 47, 52, 53, 68, 73, 74, 79, 80, 81, 96, 101, 102, 107, 108, 109, 114, 115, 116, 117]] = aa
    m[97, [32, 47, 52, 53, 68, 73, 74, 79, 80, 81, 96, 101, 102, 107, 108, 109, 114, 115, 116, 117]] = bb
    m[98, [32, 47, 52, 53, 68, 73, 74, 79, 80, 81, 96, 101, 102, 107, 108, 109, 114, 115, 116, 117]] = cc
    m[99, [33, 48, 53, 54, 69, 74, 75, 80, 81, 82, 97, 102, 103, 108, 109, 110, 115, 116, 117, 118]] = aa
    m[100, [33, 48, 53, 54, 69, 74, 75, 80, 81, 82, 97, 102, 103, 108, 109, 110, 115, 116, 117, 118]] = bb
    m[101, [33, 48, 53, 54, 69, 74, 75, 80, 81, 82, 97, 102, 103, 108, 109, 110, 115, 116, 117, 118]] = cc
    m[102, [34, 49, 54, 55, 70, 75, 76, 81, 82, 83, 98, 103, 104, 109, 110, 111, 116, 117, 118, 119]] = aa
    m[103, [34, 49, 54, 55, 70, 75, 76, 81, 82, 83, 98, 103, 104, 109, 110, 111, 116, 117, 118, 119]] = bb
    m[104, [34, 49, 54, 55, 70, 75, 76, 81, 82, 83, 98, 103, 104, 109, 110, 111, 116, 117, 118, 119]] = cc

    ps_monomials = np.array([aa,bb,cc])


    return (ps_monomials, m)

def shift_matrix(vh):
    A = vh[-crk:]
    A0 = np.concatenate((A[:, :qp], np.zeros((crk, qD - qp))), axis=1)
    [s1, s2, s3] = list(np.random.normal(0, 1, n))  # Generate random shift function. shift = s1*ss1 + s2*ss2 + s3*ss3

    l1 = [1, 4, 5, 6, 10, 11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 35, 36, 37, 38, 39, 40, 41, 42,
          43, 44, 45, 46, 47, 48, 49, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
          76, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
          108, 109, 110, 111]
    l2 = [2, 5, 7, 8, 11, 13, 14, 16, 17, 18, 21, 23, 24, 26, 27, 28, 30, 31, 32, 33, 36, 38, 39, 41, 42, 43, 45, 46,
          47, 48, 50, 51, 52, 53, 54, 57, 59, 60, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81,
          82, 85, 87, 88, 90, 91, 92, 94, 95, 96, 97, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113,
          114, 115, 116, 117, 118]
    l3 = [3, 6, 8, 9, 12, 14, 15, 17, 18, 19, 22, 24, 25, 27, 28, 29, 31, 32, 33, 34, 37, 39, 40, 42, 43, 44, 46, 47,
          48, 49, 51, 52, 53, 54, 55, 58, 60, 61, 63, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82,
          83, 86, 88, 89, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 113, 114,
          115, 116, 117, 118, 119]
    B = np.zeros((crk, qD))
    B[0][l1] += s1 * A0[0][:qp]
    B[0][l2] += s2 * A0[0][:qp]
    B[0][l3] += s3 * A0[0][:qp]
    B[1][l1] += s1 * A0[1][:qp]
    B[1][l2] += s2 * A0[1][:qp]
    B[1][l3] += s3 * A0[1][:qp]
    B[2][l1] += s1 * A0[2][:qp]
    B[2][l2] += s2 * A0[2][:qp]
    B[2][l3] += s3 * A0[2][:qp]
    B[3][l1] += s1 * A0[3][:qp]
    B[3][l2] += s2 * A0[3][:qp]
    B[3][l3] += s3 * A0[3][:qp]
    B[4][l1] += s1 * A0[4][:qp]
    B[4][l2] += s2 * A0[4][:qp]
    B[4][l3] += s3 * A0[4][:qp]
    B[5][l1] += s1 * A0[5][:qp]
    B[5][l2] += s2 * A0[5][:qp]
    B[5][l3] += s3 * A0[5][:qp]
    B[6][l1] += s1 * A0[6][:qp]
    B[6][l2] += s2 * A0[6][:qp]
    B[6][l3] += s3 * A0[6][:qp]
    B[7][l1] += s1 * A0[7][:qp]
    B[7][l2] += s2 * A0[7][:qp]
    B[7][l3] += s3 * A0[7][:qp]
    B[8][l1] += s1 * A0[8][:qp]
    B[8][l2] += s2 * A0[8][:qp]
    B[8][l3] += s3 * A0[8][:qp]
    B[9][l1] += s1 * A0[9][:qp]
    B[9][l2] += s2 * A0[9][:qp]
    B[9][l3] += s3 * A0[9][:qp]
    B[10][l1] += s1 * A0[10][:qp]
    B[10][l2] += s2 * A0[10][:qp]
    B[10][l3] += s3 * A0[10][:qp]
    B[11][l1] += s1 * A0[11][:qp]
    B[11][l2] += s2 * A0[11][:qp]
    B[11][l3] += s3 * A0[11][:qp]
    B[12][l1] += s1 * A0[12][:qp]
    B[12][l2] += s2 * A0[12][:qp]
    B[12][l3] += s3 * A0[12][:qp]
    B[13][l1] += s1 * A0[13][:qp]
    B[13][l2] += s2 * A0[13][:qp]
    B[13][l3] += s3 * A0[13][:qp]
    B[14][l1] += s1 * A0[14][:qp]
    B[14][l2] += s2 * A0[14][:qp]
    B[14][l3] += s3 * A0[14][:qp]
    B[15][l1] += s1 * A0[15][:qp]
    B[15][l2] += s2 * A0[15][:qp]
    B[15][l3] += s3 * A0[15][:qp]
    B[16][l1] += s1 * A0[16][:qp]
    B[16][l2] += s2 * A0[16][:qp]
    B[16][l3] += s3 * A0[16][:qp]
    B[17][l1] += s1 * A0[17][:qp]
    B[17][l2] += s2 * A0[17][:qp]
    B[17][l3] += s3 * A0[17][:qp]
    B[18][l1] += s1 * A0[18][:qp]
    B[18][l2] += s2 * A0[18][:qp]
    B[18][l3] += s3 * A0[18][:qp]
    B[19][l1] += s1 * A0[19][:qp]
    B[19][l2] += s2 * A0[19][:qp]
    B[19][l3] += s3 * A0[19][:qp]
    B[20][l1] += s1 * A0[20][:qp]
    B[20][l2] += s2 * A0[20][:qp]
    B[20][l3] += s3 * A0[20][:qp]
    B[21][l1] += s1 * A0[21][:qp]
    B[21][l2] += s2 * A0[21][:qp]
    B[21][l3] += s3 * A0[21][:qp]
    B[22][l1] += s1 * A0[22][:qp]
    B[22][l2] += s2 * A0[22][:qp]
    B[22][l3] += s3 * A0[22][:qp]
    B[23][l1] += s1 * A0[23][:qp]
    B[23][l2] += s2 * A0[23][:qp]
    B[23][l3] += s3 * A0[23][:qp]
    B[24][l1] += s1 * A0[24][:qp]
    B[24][l2] += s2 * A0[24][:qp]
    B[24][l3] += s3 * A0[24][:qp]
    B[25][l1] += s1 * A0[25][:qp]
    B[25][l2] += s2 * A0[25][:qp]
    B[25][l3] += s3 * A0[25][:qp]
    B[26][l1] += s1 * A0[26][:qp]
    B[26][l2] += s2 * A0[26][:qp]
    B[26][l3] += s3 * A0[26][:qp]

    return (A, A0, B)

def sol(D , A, V, zz, A2, p, N):
    sols = ((A.T).dot(V))[1:n + 1] / ((A.T).dot(V))[0]

    costM = 1e10
    indM = 0
    CbarM = np.eye(3)

    for j in range(sols.shape[1]):
        if np.amax(abs(sols[:, j].imag))>1e-5:
            continue

        Cbar = cayley2rotbar(sols[:, j])
        CbarVec = Cbar[:].reshape(-1, 1)
        cost = np.dot(np.dot(CbarVec.T, D), CbarVec)

        if cost < costM:
            indM = j
            CbarM = Cbar
            costM =cost


    rot = (np.real(1 / (1 + np.dot(sols[:, indM].reshape(1, -1), sols[:, indM].reshape(-1, 1)))) * np.real(CbarM)).reshape(3, 3)


    b2 = np.zeros((3, 1))
    for i in range(N):
        b2 += np.dot(np.dot((zz[i] - np.eye(3)), rot), p[:, i].reshape(-1, 1))

    # recover the optimal translation
    trans = -np.ravel(la.solve(A2, b2)).reshape((3, 1))

    return (rot,trans)

def cayley2rotbar(s):
  s = s.reshape(-1,1)
  C = ((1 - np.dot(s.T,s))*np.eye(3) + 2 * skewsymm(s) + 2 * np.dot(s,s.T)).T
  return C

def skewsymm(vec):
  ''' Generate a skew symmetric matrix. '''
  (x,y,z) = vec.reshape(1,-1)[0]
  return np.array([[0,-z,y], [z,0,-x], [-y,x,0]])

def print_output(R_out, t_out):
    print("\nPNP output : \n")
    print("R: ", R_out)
    print("t: ", t_out)

def read_points_lines(input_file_name_lines, input_file_name_points):
    # Input: points(Nx3) & lines(Nx3). lines are unit vectors.
    if input_file_name_lines[-3:]=='txt':
        lines = np.array([[float(row[0].split()[i]) for i in range(3)] for row in list(csv.reader(open(input_file_name_lines)))])
        points = np.array([[float(row[0].split()[i]) for i in range(3)] for row in list(csv.reader(open(input_file_name_points)))])
    if input_file_name_lines[-3:] == 'csv':
        lines = np.array([[float(row[i]) for i in range(3)] for row in list(csv.reader(open(input_file_name_lines)))])
        points = np.array([[float(row[i]) for i in range(3)] for row in list(csv.reader(open(input_file_name_points)))])
    lines = np.array([l / np.linalg.norm(l) for l in lines])
    return (points, lines)

def calccost(lines,points,R,t):
    # calculates the average projection error of the pnp problem. Error of Rot ant trans given points(pattern) and lines(all lines)
    #sumcost= sum((1/n)||(R*p-t)'*(I-vv')||^2)
    sumcost = 0
    for i in range(len(points)):
        I=np.identity(3)
        line = lines[i, :].reshape(3, 1)
        vvt = np.matmul(line, line.T)
        Rpminust = np.matmul(R, points[i, :]).reshape(3, 1) - t
        cos = np.linalg.norm(np.matmul(Rpminust.T, (I - vvt)))
        sumcost += (cos**2) /len(points)
    return sumcost

if __name__ == '__main__':
    input_file_name_lines = 'lines2.txt'
    input_file_name_points = 'points2.txt'

    (points, lines) = read_points_lines(input_file_name_lines, input_file_name_points)

    start = time.time()
    (rot, trans) = pnp(points, lines)
    end = time.time()
    print("pnp time = " + str(end - start))


    print_output(rot, trans)
    print('Cost :', calccost(lines, points, rot, trans))


